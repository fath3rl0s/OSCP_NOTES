{
	"nodes":[
		{"id":"e8959b45ec14d7a6","type":"file","file":"BOXES/HTB/1. HTB IMAGES/Pasted image 20240511093600.png","x":-600,"y":-103,"width":760,"height":428,"color":"5"},
		{"id":"698741cddf0697ac","type":"text","text":"NTLM Authentication Process\n[[1. STARTING POINT#**RESPONDER**]]","x":-600,"y":-236,"width":760,"height":133,"color":"5"},
		{"id":"230c113e304d81c3","type":"text","text":"\nWHAT IS IT?\n\n1. ==**Negotiation**==\n\n- **Client Request**: The process begins when the client sends a negotiation message to the server. This message indicates that the client wants to establish a connection using NTLM and informs the server of the NTLM capabilities it supports (like NTLM version 1 or 2, encryption types, etc.).\n\n2. ==**Challenge**==\n\n- **Server Challenge**: In response to the client's negotiation message, the server generates and sends back a challenge. This challenge is a random 8-byte number, known as the \"nonce,\" used to ensure the freshness of the session and prevent replay attacks.\n\n3. ==**Authentication**==\n\n- **Client Response**: Upon receiving the server's challenge, the client hashes the user's password with the nonce (and other information, depending on NTLM version) to generate a response. The specifics of the response depend on the NTLM version:\n    - **NTLMv1**: The response is generated using the DES algorithm to hash the nonce with a 56-bit key derived from the user's password.\n    - **NTLMv2**: This version is more secure and includes protections against certain attacks that NTLMv1 is vulnerable to. NTLMv2 uses HMAC-MD5 to create a hash from the user's NT hash and the server's nonce, and it incorporates additional data such as a client nonce (another random value generated by the client), current time, and domain information.\n- **Credential Verification**: The client sends this response back to the server along with other details like the user's username and domain. The server then validates this response against its own calculation of what the response should be, based on the stored hash of the user's password and the nonce it sent.\n- **Session Security**: If the authentication is successful, NTLM can optionally establish session security for encrypting and signing messages to ensure confidentiality and integrity.","x":-2000,"y":400,"width":1000,"height":720,"color":"3"},
		{"id":"19f94ba82d90897a","type":"text","text":"**==REMEDIATION==**\n\nLimitations and Security Considerations\n\n- **Pass-the-Hash Vulnerability**: NTLM is susceptible to pass-the-hash attacks, where an attacker who has stolen a hash can use it to authenticate without needing the actual password.\n- **No Mutual Authentication**: Unlike Kerberos, NTLM does not provide mutual authentication by default (where both the client and server verify each other's identities).\n- **Reliance on Hash Strength**: NTLM security heavily depends on the strength and secrecy of the hash of the user's password.\n\nDue to these and other limitations, Microsoft recommends using Kerberos authentication where possible, as it provides better security features compared to NTLM. NTLM is mostly maintained for compatibility with systems where Kerberos cannot be used","x":-932,"y":1240,"width":1452,"height":440,"color":"5"},
		{"id":"1056bd3f977c77f7","type":"file","file":"BOXES/HTB/1. HTB IMAGES/Screenshot 2024-05-15 at 9.26.38 PM.png","x":-7160,"y":242,"width":1749,"height":643,"color":"4"},
		{"id":"c8e0076d8d05a8a2","type":"text","text":"https://goteleport.com/blog/ssh-tunneling-explained/","x":-3713,"y":192,"width":716,"height":50,"color":"4"},
		{"id":"b435c94dd881dd32","type":"text","text":"**When to use remote port forwarding?**\n\n### Exposing service running in localhost of a server behind NAT to the internet\n\nConsider the scenario below. The client runs a web server on port 3000 but cannot expose this web server to the public internet as the client machine is behind NAT. The remote server, on the other hand, can be reachable via the internet. The client can SSH into this remote server. In this situation, how can the client expose the webserver on port `3000` to the internet? Via reverse SSH tunnel!\n\nSteps:\n\n1. Run a web server on client localhost port `3000`. \n2. Configure reverse tunnel with command.\n\n`ssh -R 80:127.0.0.1:3000 user@<remote_server_ip>`\n\n3. Now, when users from distant internet visit port `80` of the remote server as `http://<remote_server_ip>`, the request is redirected back to the client's local server (port `3000`) via SSH tunnel where the local server handles the request and response.\n\nBy default, the remote port forwarding tunnel will bind to the localhost of the remote server. To enable it to listen on the public interface (for a scenario like above), set the SSH configuration `GatewayPorts yes` in `sshd_config`.","x":-4640,"y":1120,"width":1643,"height":642,"color":"4"},
		{"id":"0d1ff6d109e053d3","type":"file","file":"BOXES/HTB/1. HTB IMAGES/Pasted image 20240515212145.png","x":-4640,"y":242,"width":1643,"height":878,"color":"4"},
		{"id":"382d0db4d659ada5","type":"text","text":"REVERSE SSH TUNNEL","x":-4640,"y":142,"width":421,"height":50,"color":"4"},
		{"id":"1f088bc7157546ff","type":"text","text":"SSH local port forwarding command for above scenario:\n\n`ssh -L 5432:127.0.0.1:5432 user@<remote_db_server>`\n\nFurther, there are no restrictions on the number of port forwarding you want to enable. For example, below SSH forwards two local ports, `3338` and `3339`, to remote ports `3338` and `3339`.\n\n`ssh -L 3338:localhost:3338 -L 3339:localhost:3339 user@<remote_server>`\n\nBy default, an interactive session is created for you when you command local port forwarding. To prevent interactive sessions, you can use the `-N` flag that tells SSH to not to execute remote commands:\n\n`ssh -N -L 3339:localhost:3339 user@<remote_server>`","x":-7160,"y":885,"width":1749,"height":395,"color":"4"},
		{"id":"cea3b11fca6348b2","type":"text","text":"### Accessing Insecure Protocol\n\nIf a service running at a remote server does not natively support an encrypted transport mechanism, in that case, local port forwarding can be used to connect to that service by tunneling inside an encrypted SSH session.\n\n### Secure access to remote service\n\nFor security reasons, it is good to bind services only to the local interface (as opposed to listening on a public interface). The flip side to this is how users would access the service from an external network. You can use local port forwarding to access the service that is listening on the remote localhost. In this way, connections on the local machine made to the forwarded port will, in effect, be connecting to the remote machine.","x":-5820,"y":-1400,"width":1480,"height":441,"color":"4"},
		{"id":"15fc4e2c39fc8201","type":"file","file":"BOXES/HTB/1. HTB IMAGES/Pasted image 20240515211526.png","x":-5690,"y":-800,"width":1220,"height":686,"color":"4"},
		{"id":"b83250e12564aaeb","type":"text","text":"You can use an SSH tunnel to forward almost any service running remotely on a server. SSH tunneling is a versatile and powerful tool for securely forwarding network traffic from your local machine to a remote server, and vice versa. Here are some key points about using SSH tunnels to forward services:\n\n### General Capabilities\n\n1. **Any TCP Service:** SSH tunneling works with any service that uses TCP (Transmission Control Protocol). This includes but is not limited to:\n    \n    - Databases (PostgreSQL, MySQL, MongoDB, etc.)\n    - Web servers (HTTP, HTTPS)\n    - Remote desktop services (RDP, VNC)\n    - Email servers (SMTP, IMAP, POP3)\n    - File transfer protocols (FTP, SFTP, SCP)\n    - Any custom TCP service","x":-7400,"y":-1575,"width":1251,"height":598,"color":"4"},
		{"id":"220c2189a4b42f32","type":"text","text":"### Limits and Considerations\n\n1. **UDP Services:**\n    \n    - SSH tunneling natively supports only TCP. It does not support UDP (User Datagram Protocol) directly. However, you can work around this limitation by using additional tools like `socat` or `udp2raw`.\n2. **Network Latency:**\n    \n    - Tunneling can introduce additional latency, especially if the SSH server is far from the client or under heavy load.\n3. **Bandwidth and Performance:**\n    \n    - The performance of the tunnel is limited by the network bandwidth and the processing power of the SSH server and client.\n4. **Firewall and Security Policies:**\n    \n    - Ensure that tunneling does not violate network security policies. Some organizations may restrict SSH tunneling to prevent unauthorized access to internal resources.\n5. **Authentication and Authorization:**\n    \n    - You need appropriate credentials to establish the SSH connection and access the forwarded service.","x":-7400,"y":-897,"width":1251,"height":640,"color":"1"},
		{"id":"bcfa9f8f4e602755","type":"text","text":"LOCAL PORT FORWARDING","x":-7160,"y":93,"width":320,"height":50,"color":"4"},
		{"id":"4760ffc0bb2c3bdf","type":"text","text":"# SSH TUNNELLING","x":-5320,"y":-1695,"width":280,"height":120,"color":"4"}
	],
	"edges":[
		{"id":"be4affdb8825f2f0","fromNode":"e8959b45ec14d7a6","fromSide":"left","toNode":"230c113e304d81c3","toSide":"top"},
		{"id":"419f41e1fb01102c","fromNode":"230c113e304d81c3","fromSide":"bottom","toNode":"19f94ba82d90897a","toSide":"left"},
		{"id":"295667b2edf122e0","fromNode":"15fc4e2c39fc8201","fromSide":"left","toNode":"1056bd3f977c77f7","toSide":"top"},
		{"id":"39fa7c91801e10aa","fromNode":"15fc4e2c39fc8201","fromSide":"right","toNode":"0d1ff6d109e053d3","toSide":"top"},
		{"id":"753b361d084d1aed","fromNode":"4760ffc0bb2c3bdf","fromSide":"bottom","toNode":"cea3b11fca6348b2","toSide":"top"},
		{"id":"c4468ca2df614d63","fromNode":"cea3b11fca6348b2","fromSide":"bottom","toNode":"15fc4e2c39fc8201","toSide":"top"},
		{"id":"70eacca23074b34b","fromNode":"4760ffc0bb2c3bdf","fromSide":"left","toNode":"b83250e12564aaeb","toSide":"top"},
		{"id":"d38b7390f5e124f3","fromNode":"b83250e12564aaeb","fromSide":"bottom","toNode":"220c2189a4b42f32","toSide":"top"}
	]
}